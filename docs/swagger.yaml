basePath: /
definitions:
  api.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  api.HealthCheckResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  api.LoginRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  api.LoginResponse:
    properties:
      api_key:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  api.SMTPSettingsResponse:
    properties:
      smtp_port:
        type: integer
      smtp_server:
        type: string
      username:
        type: string
    type: object
  api.SignupRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        description: |-
          Username must be between 3 to 20 characters long, allowing only alphanumeric characters,
          underscores, and hyphens. It is required and should be unique.
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.SignupResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  api.UserResponse:
    properties:
      api_key:
        type: string
      email:
        type: string
      smtp_settings:
        $ref: '#/definitions/api.SMTPSettingsResponse'
      telegram_bot:
        $ref: '#/definitions/models.TelegramBot'
      username:
        type: string
    type: object
  models.TelegramBot:
    properties:
      bot_token:
        type: string
      chat_id:
        type: string
    type: object
host: 127.0.0.1:3031
info:
  contact: {}
  description: PhoenixUptime Backend API
  title: PhoenixUptime API
  version: "1.0"
paths:
  /account/me:
    get:
      consumes:
      - application/json
      description: Returns information about the authenticated user, including their
        SMTP and Telegram bot settings.
      parameters:
      - description: API Key for user authentication (Header)
        in: header
        name: api_key
        type: string
      - description: API Key for user authentication (Query)
        in: query
        name: api_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user information with settings
          schema:
            $ref: '#/definitions/api.UserResponse'
        "401":
          description: unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - ApiKeyHeader: []
      - ApiKeyQuery: []
      summary: Get User Information
      tags:
      - Account
  /health:
    get:
      description: Check if the API is healthy
      responses:
        "200":
          description: status and message
          schema:
            $ref: '#/definitions/api.HealthCheckResponse'
      summary: Health check
      tags:
      - Health
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user with username and password, returning an API key
        if successful.
      parameters:
      - description: User login data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully logged in
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: invalid login payload
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User Login
      tags:
      - Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Allows a new user to sign up, but only one user can exist.
      parameters:
      - description: User signup data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/api.SignupResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Signup not allowed if a user already exists
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User Signup
      tags:
      - Auth
securityDefinitions:
  ApiKeyHeader:
    in: header
    name: x-api-key
    type: apiKey
  ApiKeyQuery:
    in: query
    name: api_key
    type: apiKey
swagger: "2.0"
